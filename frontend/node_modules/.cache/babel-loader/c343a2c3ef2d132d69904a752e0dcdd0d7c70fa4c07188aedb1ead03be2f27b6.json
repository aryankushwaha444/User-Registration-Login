{"ast":null,"code":"import axios from \"axios\";\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:8000/api\";\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"access_token\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle token refresh\napi.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const refreshToken = localStorage.getItem(\"refresh_token\");\n      if (refreshToken) {\n        const response = await axios.post(`${API_BASE_URL}/auth/refresh/`, {\n          refresh: refreshToken\n        });\n        const {\n          access\n        } = response.data;\n        localStorage.setItem(\"access_token\", access);\n        originalRequest.headers.Authorization = `Bearer ${access}`;\n        return api(originalRequest);\n      }\n    } catch (refreshError) {\n      // Refresh token failed, redirect to login\n      localStorage.removeItem(\"access_token\");\n      localStorage.removeItem(\"refresh_token\");\n      window.location.href = \"/login\";\n    }\n  }\n  return Promise.reject(error);\n});\nclass AuthService {\n  // Token management\n  getTokens() {\n    return {\n      access: localStorage.getItem(\"access_token\"),\n      refresh: localStorage.getItem(\"refresh_token\")\n    };\n  }\n  setTokens(access, refresh) {\n    localStorage.setItem(\"access_token\", access);\n    localStorage.setItem(\"refresh_token\", refresh);\n  }\n  clearTokens() {\n    localStorage.removeItem(\"access_token\");\n    localStorage.removeItem(\"refresh_token\");\n  }\n\n  // Authentication\n  async register(userData) {\n    const response = await api.post(\"/auth/register/\", userData);\n    const {\n      tokens\n    } = response.data;\n    this.setTokens(tokens.access, tokens.refresh);\n    return response.data;\n  }\n  async login(email, password) {\n    const response = await api.post(\"/auth/login/\", {\n      email,\n      password\n    });\n    const {\n      tokens\n    } = response.data;\n    this.setTokens(tokens.access, tokens.refresh);\n    return response.data;\n  }\n  async logout() {\n    try {\n      const refreshToken = localStorage.getItem(\"refresh_token\");\n      if (refreshToken) {\n        await api.post(\"/auth/logout/\", {\n          refresh_token: refreshToken\n        });\n      }\n    } finally {\n      this.clearTokens();\n    }\n  }\n  async getProfile() {\n    const response = await api.get(\"/auth/profile/\");\n    return response.data;\n  }\n  async updateProfile(userData) {\n    const response = await api.patch(\"/auth/profile/\", userData);\n    return response.data;\n  }\n\n  // 2FA\n  async setup2FA() {\n    const response = await api.get(\"/auth/2fa/setup/\");\n    return response.data;\n  }\n  async verify2FASetup(token) {\n    const response = await api.post(\"/auth/2fa/verify/\", {\n      token\n    });\n    return response.data;\n  }\n  async disable2FA(password) {\n    const response = await api.post(\"/auth/2fa/disable/\", {\n      password\n    });\n    return response.data;\n  }\n  async verify2FALogin(email, token, isBackupCode = false) {\n    const response = await api.post(\"/auth/2fa/verify-login/\", {\n      email,\n      token,\n      is_backup_code: isBackupCode\n    });\n    const {\n      tokens\n    } = response.data;\n    this.setTokens(tokens.access, tokens.refresh);\n    return response.data;\n  }\n\n  // Password management\n  async requestPasswordReset(email) {\n    const response = await api.post(\"/auth/password-reset/\", {\n      email\n    });\n    return response.data;\n  }\n  async confirmPasswordReset(token, newPassword, newPasswordConfirm) {\n    const response = await api.post(\"/auth/password-reset/confirm/\", {\n      token,\n      new_password: newPassword,\n      new_password_confirm: newPasswordConfirm\n    });\n    return response.data;\n  }\n}\nexport const authService = new AuthService();","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","originalRequest","status","_retry","refreshToken","post","refresh","access","data","setItem","refreshError","removeItem","window","location","href","AuthService","getTokens","setTokens","clearTokens","register","userData","tokens","login","email","password","logout","refresh_token","getProfile","get","updateProfile","patch","setup2FA","verify2FASetup","disable2FA","verify2FALogin","isBackupCode","is_backup_code","requestPasswordReset","confirmPasswordReset","newPassword","newPasswordConfirm","new_password","new_password_confirm","authService"],"sources":["/Users/aryankushwaha/Desktop/CodAvatar/2/frontend/src/services/authService.js"],"sourcesContent":["import axios from \"axios\";\n\nconst API_BASE_URL =\n  process.env.REACT_APP_API_URL || \"http://localhost:8000/api\";\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem(\"access_token\");\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle token refresh\napi.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n\n    if (error.response?.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n\n      try {\n        const refreshToken = localStorage.getItem(\"refresh_token\");\n        if (refreshToken) {\n          const response = await axios.post(`${API_BASE_URL}/auth/refresh/`, {\n            refresh: refreshToken,\n          });\n\n          const { access } = response.data;\n          localStorage.setItem(\"access_token\", access);\n\n          originalRequest.headers.Authorization = `Bearer ${access}`;\n          return api(originalRequest);\n        }\n      } catch (refreshError) {\n        // Refresh token failed, redirect to login\n        localStorage.removeItem(\"access_token\");\n        localStorage.removeItem(\"refresh_token\");\n        window.location.href = \"/login\";\n      }\n    }\n\n    return Promise.reject(error);\n  }\n);\n\nclass AuthService {\n  // Token management\n  getTokens() {\n    return {\n      access: localStorage.getItem(\"access_token\"),\n      refresh: localStorage.getItem(\"refresh_token\"),\n    };\n  }\n\n  setTokens(access, refresh) {\n    localStorage.setItem(\"access_token\", access);\n    localStorage.setItem(\"refresh_token\", refresh);\n  }\n\n  clearTokens() {\n    localStorage.removeItem(\"access_token\");\n    localStorage.removeItem(\"refresh_token\");\n  }\n\n  // Authentication\n  async register(userData) {\n    const response = await api.post(\"/auth/register/\", userData);\n    const { tokens } = response.data;\n    this.setTokens(tokens.access, tokens.refresh);\n    return response.data;\n  }\n\n  async login(email, password) {\n    const response = await api.post(\"/auth/login/\", { email, password });\n    const { tokens } = response.data;\n    this.setTokens(tokens.access, tokens.refresh);\n    return response.data;\n  }\n\n  async logout() {\n    try {\n      const refreshToken = localStorage.getItem(\"refresh_token\");\n      if (refreshToken) {\n        await api.post(\"/auth/logout/\", { refresh_token: refreshToken });\n      }\n    } finally {\n      this.clearTokens();\n    }\n  }\n\n  async getProfile() {\n    const response = await api.get(\"/auth/profile/\");\n    return response.data;\n  }\n\n  async updateProfile(userData) {\n    const response = await api.patch(\"/auth/profile/\", userData);\n    return response.data;\n  }\n\n  // 2FA\n  async setup2FA() {\n    const response = await api.get(\"/auth/2fa/setup/\");\n    return response.data;\n  }\n\n  async verify2FASetup(token) {\n    const response = await api.post(\"/auth/2fa/verify/\", { token });\n    return response.data;\n  }\n\n  async disable2FA(password) {\n    const response = await api.post(\"/auth/2fa/disable/\", { password });\n    return response.data;\n  }\n\n  async verify2FALogin(email, token, isBackupCode = false) {\n    const response = await api.post(\"/auth/2fa/verify-login/\", {\n      email,\n      token,\n      is_backup_code: isBackupCode,\n    });\n    const { tokens } = response.data;\n    this.setTokens(tokens.access, tokens.refresh);\n    return response.data;\n  }\n\n  // Password management\n  async requestPasswordReset(email) {\n    const response = await api.post(\"/auth/password-reset/\", { email });\n    return response.data;\n  }\n\n  async confirmPasswordReset(token, newPassword, newPasswordConfirm) {\n    const response = await api.post(\"/auth/password-reset/confirm/\", {\n      token,\n      new_password: newPassword,\n      new_password_confirm: newPasswordConfirm,\n    });\n    return response.data;\n  }\n}\n\nexport const authService = new AuthService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}